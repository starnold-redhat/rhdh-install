kind: ConfigMap
apiVersion: v1
metadata:
  name: app-config-rhdh
  namespace: backstage
data:
  app-config-rhdh.yaml: |-
    ansible:
      creatorService:
        baseUrl: 127.0.0.1
        port: "8000"
      devSpaces:
        baseUrl: https://devspaces.{{ OCP_BASE }}
      rhaap:
        baseUrl: 'https://{{ aap_hostname }}'
        token: '{{ aap_token }}'
        checkSSL: true
      
    app:
      title: Red Hat Developer Hub
      baseUrl: https://backstage-developer-hub-backstage.{{ OCP_BASE }}
    argocd:
      appLocatorMethods:
      - instances:
        - name: main
          password: "${GITOPS_ADMIN_PASSWORD}"
          url: https://openshift-gitops-server-openshift-gitops.{{ OCP_BASE }}
          username: admin
        type: config
    backend:
      auth:
        keys:
          - secret: "${BACKEND_SECRET}"
      baseUrl: https://backstage-developer-hub-backstage.{{ OCP_BASE }}
      cors:
        origin: https://backstage-developer-hub-backstage.{{ OCP_BASE }}
    auth:
      environment: development
      session:
        secret: ${BACKEND_SECRET}
      providers:
        guest:
          dangerouslyAllowOutsideDevelopment: true
        oidc:
          development:
            metadataUrl: https://keycloak-rhsso.{{ OCP_BASE }}/auth/realms/backstage/.well-known/openid-configuration
            clientId: ${AUTH_OIDC_CLIENT_ID}
            clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
            prompt: auto 
            ## Auth provider will try each resolver until it succeeds. Uncomment the resolvers you want to use to override the default resolver: `emailLocalPartMatchingUserEntityName`
            signIn:
              resolvers:
                - resolver: preferredUsernameMatchingUserEntityName
    signInPage: oidc
    catalog:
      processingInterval: { minutes: 1 }
      processing:
        cache:
          enabled: false
      lifecycles:
        - production
        - staging
      rules:
        - allow: [Location, Component, API, Resource, System, Domain, Group, User, Template]
      locations: 
        - rules:
          - allow:
              - Template
          target: https://gitlab-gitlab.{{ OCP_BASE }}/rhdh/software-templates/-/blob/main/showcase-templates.yaml
          type: url
        - rules:
          - allow:
            - Group
            - User
          target: https://github.com/starnold-redhat/rhdh_software_templates/blob/main/org.yaml
          type: url
      providers:
        gitlab:
          selfHosted:
            host: gitlab-gitlab.{{ OCP_BASE }}
            schedule:
              frequency:
                seconds: 10
              timeout:
                seconds: 60
        keycloakOrg:
          default:
            baseUrl: https://keycloak-rhsso.{{ OCP_BASE }}
            loginRealm: ${AUTH_OIDC_CLIENT_ID}
            realm: ${AUTH_OIDC_CLIENT_ID}
            clientId: ${AUTH_OIDC_CLIENT_ID}
            clientSecret: ${AUTH_OIDC_CLIENT_SECRET}
            schedule: 
              frequency: { minutes: 1 }
              timeout: { minutes: 1 }
              initialDelay: { seconds: 15 }
    integrations:
      gitlab:
      - apiBaseUrl: https://gitlab-gitlab.{{ OCP_BASE }}/api/v4
        baseUrl: https://gitlab-gitlab.{{ OCP_BASE }}
        host: gitlab-gitlab.{{ OCP_BASE }}
        token: {{ gitlab_pat }}
    kubernetes:
      clusterLocatorMethods:
      - clusters:
        - authProvider: serviceAccount
          name: dev-cluster-infra
          serviceAccountToken: {{ rhdhaccess_token }}
          url: https://{{ OCP_BASE | replace('apps','api') }}:6443
          skipTLSVerify: true
        type: config
      customResources:
      - group: 'tekton.dev'
        apiVersion: 'v1beta1'
        plural: 'pipelines'
      - apiVersion: v1beta1
        group: tekton.dev
        plural: pipelineruns
      - apiVersion: v1beta1
        group: tekton.dev
        plural: taskruns
      - apiVersion: v1
        group: route.openshift.io
        plural: routes
      serviceLocatorMethod:
        type: multiTenant
    techdocs:
      builder: local
      generator:
        runIn: local
      publisher:
        awsS3:
          bucketName: backstage-bucket
          credentials:
            accessKeyId: minio
            secretAccessKey: minio123!
          endpoint: https://minio-minio.{{ OCP_BASE }}
          region: us-east-2
          s3ForcePathStyle: true
        type: awsS3
