apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: ansible-uki-playbook-template
  title: Create UKI Ansible Playbook Project
  description: Create a new starter Ansible playbook Git project preconfigured with best practices. The project also scaffolds a collection to help get you started.
  tags:
    - recommended
    - ansible
    - playbook
spec:
  owner: ansible-authors
  system: ansible
  type: service
  parameters:
    - title: Provide information about the new component
      required:
        - repoOwner
        - repoName
        - owner
      properties:
        repoOwner:
          title: Source code repository organization name or username
          type: string
          description: The organization name or username of your source code repository. For example, “my-github-username”.
          default: development
          enum:
            - development
        repoName:
          title: Playbook repository name
          description: The name of the new playbook project repository. For example, “my-new-playbook-repo”.
          type: string
        description:
          title: Playbook description
          type: string
          description: Describe the playbook and its purpose to help other users understand what to use it for.
        owner:
          title: Catalog Owner name
          type: string
          description: The Red Hat Developer Hub catalog item owner. This will appear on the “My items” tab. For example, “my-devhub-username”.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
      
  steps:
    - id: ansible
      name: Generating the Ansible Source Code Component
      action: fetch:template
      input:
        url: ../src/ansible-playbook
        copyWithoutTemplating: []
        values:
          system: ${{ parameters.repoName }}
          gitlab_project_id: ${{ steps.publish.output.projectId }}


    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ./catalog-info/
        values:
          repoUrl:   gitlab-gitlab.OCP_BASE?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}
          owner:  ${{ parameters.owner }}
          system:  ${{ parameters.repoName }}
          applicationType: playbook-project
          description:  ${{ parameters.description }}
          collectionGroup:  ${{ parameters.collectionGroup }}
          collectionName:  ${{ parameters.collectionName }}
          sourceControl: gitlab-gitlab.OCP_BASE
          devSpacesBaseUrl:   "https://devspaces.OCP_BASE#https://gitlab-gitlab.OCP_BASE/${{ parameters.repoOwner }}/${{ parameters.repoName }}"

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts:
          - gitlab-gitlab.OCP_BASE
        description:  ${{ parameters.description }}
        repoUrl:   "gitlab-gitlab.OCP_BASE?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}"
        repoVisibility: 'public'
        defaultBranch: main
        
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl:  ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ../gitops/ansible-playbook
        copyWithoutTemplating: []
        values:
          system: ${{ parameters.repoName }}
          gitlab_project_id: ${{ steps.publish.output.projectId }}
        targetPath: ./tenant-gitops

    - id: publishgitops
      name: Publish Gitops
      action: publish:gitlab
      input:
        allowedHosts:
          - gitlab-gitlab.OCP_BASE
        description:  ${{ parameters.description }}
        repoUrl:   "gitlab-gitlab.OCP_BASE?owner=${{ parameters.repoOwner }}&repo=${{ parameters.repoName }}-gitops"
        repoVisibility: 'public'
        defaultBranch: main
        sourcePath: ./tenant-gitops

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        projectName: ${{ parameters.repoName }}
        appName: ${{ parameters.repoName }}-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://gitlab-gitlab.OCP_BASE/${{ parameters.repoOwner }}/${{ parameters.repoName }}-gitops.git
        path: 'bootstrap/'

  output:
    links:
      - title: Repository
        url:  ${{ steps.publish.output.remoteUrl }}

      - title: Open in catalog
        icon: catalog
        entityRef:  ${{ steps.register.output.entityRef }}
